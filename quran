#!/bin/sh

set -euo pipefail

: "${XDG_DATA_HOME=$HOME/.local/share}"
: "${PAGER=more}"

if ! [ -t 1 ]; then
	PAGER=cat
fi

count=
while getopts :c: opt; do
	case $opt in
	c) count=$OPTARG ;;
	?) printf >&2 'usage: %s [-c count] [surah [verse]]\n' \
		"$(basename "$0")"; exit 2
	esac
done
shift $((OPTIND-1))

if [ ! "$count" ]; then
	if [ $# -gt 1 ]; then count=1
	elif [ $# -gt 0 ]; then count=-
	else count=0
	fi
fi

cd "$XDG_DATA_HOME/quran/text"

files=${QURAN_TEXT:-$(ls | grep -vx -e surahs -e '.*\.dat' | head -n1)}

IFS=, i=0
for f in $files; do
	if ! [ -f "$f" ]; then
		printf >&2 '%s: invalid text (%s)\n' "$(basename "$0")" "$f"
		exit 1
	fi
	i=$((i+1))
done
unset IFS

if [ $# -eq 0 ] && [ "$count" = 1 ] && [ $i -eq 1 ]; then
	fortune "$f" | $PAGER
	exit
fi

read_int() {
	printf '%d\n' \
	"$(od -j "$2" -N "$3" -t "x$3" "$1" 2>/dev/null | awk 'NR == 1 {
		if ($2 == "") exit 1
		if (length($2) % 2 != 0) $2 = "0" $2
		printf "0x"
		for (i = length($2)-1; i > 0; i-=2)
			printf "%s", substr($2, i, 2)
		printf "\n"
		exit
	}')"
}

size=$(wc -c "$f.dat" | awk '{print $1}')
max=$(read_int "$f.dat" 4 4)
off=$(((size-24)/(max+1)))

get_offset() {
	read_int "$1.dat" $((24+off*$2)) "$off"
}

get_surah() {
	tail -c +$(($(get_offset surahs $(($1-1)))+1)) surahs | head -n1
}

if [ $# -gt 0 ]; then
	isnum=$(test "$1" -eq "$1" 2>/dev/null && echo 1||:)
	surah=
	if [ ! "$isnum" ]; then
		surah=$(awk -F '\t' -v OFS='\t' -v name="$1" '{
			gsub(/[-'\'']/, "", $2)
			if (index(tolower($2), name)) {
				print
				exit
			}
		}' surahs)
	fi
	if [ ! "$surah" ]; then
		if [ ! "$isnum" ] || [ "$1" -lt 1 ] || [ "$1" -gt 114 ]; then
			printf >&2 '%s: invalid surah\n' "$(basename "$0")"
			exit 1
		fi
		surah=$(get_surah "$1")
	fi
	pos=$(printf '%s\n' "$surah" | cut -f 4)
	if [ $# -gt 1 ]; then
		len=$(printf '%s\n' "$surah" | cut -f 3)
		isnum=$(test "$2" -eq "$2" 2>/dev/null && echo 1||:)
		if [ ! "$isnum" ] || [ "$2" -lt 1 ] || [ "$2" -gt "$len" ]; then
			printf >&2 '%s: invalid verse\n' "$(basename "$0")"
			exit 1
		fi
		pos=$((pos+$2-1))
	fi
else
	pos=$(awk -v max="$max" 'BEGIN{srand();print int(rand()*max)}')
fi

print_text() {
	awk -v RS='%' -v count="$count" '{
		split($NF, sv, ":")
		if (sv[2] == 1 && NR != 1 && count == "-") exit
		printf "%s", $0
		if (++i == count) exit
	}' | $PAGER
}

join_texts() {
	awk -v fs="$1" -v offs="$2" -v apos=\' '
	function escape(arg) {
		gsub(apos, apos "\\" apos apos, arg)
		return apos arg apos
	}
	BEGIN {
		n = split(fs, files, /,/)
		split(offs, offsets, /,/)
		for (i = 1; i <= n; i++)
			cmds[i] = sprintf("tail -c +%d %s", offsets[i]+1,
				escape(files[i]))
		do {
			pending = 0
			for (i = 1; i <= n; i++) {
				while (ret = cmds[i] | getline line) {
					if (ret == -1) exit 1
					if (line == "%") break
					if (line ~ /[0-9]:[0-9]/) last = line
					else printf "%s", line
				}
				printf "\n"
				if (i != n) printf "\n"
				if (ret) pending = 1
			}
			print last
			print "%"
		} while (pending)
		for (i = 1; i <= n; i++) close(cmds[i])
	}
	'
}

if [ $i -eq 1 ]; then
	offset=$(get_offset "$f" "$pos")
	tail -c +$((offset+1)) "$f" | print_text
else
	offsets=$(IFS=,; for f in $files; do get_offset "$f" "$pos"; done |
		paste -sd, -)
	join_texts "$files" "$offsets" | fold -s | print_text
fi
