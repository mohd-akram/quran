#!/bin/sh

set -euo pipefail

: "${XDG_DATA_HOME=$HOME/.local/share}"

# Recitations list download
echo >&2 Downloading list of recitations
recitations=$(curl -f https://everyayah.com/recitations_ayat.html |
awk -F '[<>]' '
/<strong>.*[Kk]bps<\/strong>/ {
	if (match($3, /files missing/)) {
		skip = 1
		next
	}
	match($3, /[0-9]/)
	name = tolower(substr($3, 1, RSTART-2))
	gsub(/[ _]/, "-", name)
	gsub(/[^-0-9a-z]/, "", name)
}
/ZIP/ {
	if (skip) {
		skip = 0
		next
	}
	split($2, attr, "\"")
	url = attr[2]
	if (!names[name]) {
		printf "%s\t%s\n", name, url
		names[name] = 1
	}
}
')
echo >&2

# Translations list download
echo >&2 Downloading list of translations
translations=$(curl -f https://tanzil.net/trans/ | awk -v RS=" " '
/^href="\/trans\/[^\/"]+"$/ {
	split($0, attr, "\"")
	url = attr[2]
	split(url, parts, "/")
	sub(/\./, "-", parts[3])
	name = parts[3]
	printf "%s\thttps://tanzil.net%s\n", name, url
}
')
echo >&2

# Text selection
types=simple-clean
printf >&2 'Select a text type:\n%s\n\n' "$types"
while true; do
	default_type=simple-clean
	printf >&2 'Type [%s]: ' "$default_type"
	read -r type
	type=${type:-$default_type}
	if printf '%s\n' "$types" | grep -Fx "$type"; then
		break
	fi
done
echo >&2

# Translation selection
translation_names=$(printf '%s\n' "$translations" | awk -F '\t' '{print $1}')
printf >&2 'Select a translation:\n%s\n\n' "$translation_names"
while true; do
	default_translation=en-sahih
	printf >&2 'Translation [%s]: ' "$default_translation"
	read -r translation
	translation=${translation:-$default_translation}
	if printf '%s\n' "$translation_names" | grep -Fx "$translation"; then
		break
	fi
done
echo >&2

# Recitation selection
recitation_names=$(printf '%s\n' "$recitations" | awk -F '\t' '{print $1}')
printf >&2 'Select a recitation:\n%s\n\n' "$recitation_names"
while true; do
	default_recitation=minshawy-murattal
	printf >&2 'Recitation [%s]: ' "$default_recitation"
	read -r recitation
	recitation=${recitation:-$default_recitation}
	if printf '%s\n' "$recitation_names" | grep -Fx "$recitation"; then
		break
	fi
done
echo >&2

# Text download
mkdir -p "$XDG_DATA_HOME/quran/text"
cd "$XDG_DATA_HOME/quran/text"
# Create metadata
if ! [ -f surahs ] || ! [ -f surahs.dat ]; then
	echo >&2 Downloading metadata
	# Surahs fortune
	curl -f https://tanzil.net/res/text/metadata/quran-data.xml | awk '
	/<sura / {
	match($0, /index="[^"]+"/)
	n = substr($0, RSTART+7, RLENGTH-8)
	match($0, /tname="[^"]+"/)
	name = substr($0, RSTART+7, RLENGTH-8)
	match($0, /ayas="[^"]+"/)
	ayas = substr($0, RSTART+6, RLENGTH-7)
	match($0, /start="[^"]+"/)
	start = substr($0, RSTART+7, RLENGTH-8)
	if (n != 1) print "%"
	printf "%d\t%s\t%d\t%d\n", n, name, ayas, start
	}' > surahs
	strfile surahs >/dev/null
	echo >&2
fi
# Download text
if [ -f "$type" ] && [ -f "$type.dat" ]; then
	printf >&2 'Text already exists (%s)\n' "$type"
else
	printf >&2 'Downloading text (%s)\n' "$type"
	text=$(curl -fG \
		-d quranType="$type" -d alef=true \
		-d outType=txt-2 -d agree=true \
		https://tanzil.net/pub/download/index.php)
	# Quran fortune
	printf '%s\n' "$text" | tr -d '\r' | awk -F '|' '
	!$0 {exit}
	{if (NR != 1) print "%";
	printf "%s\n\t\t-- Quran %d:%d\n", $3, $1, $2}
	' | fold -s > "$type"
	strfile "$type" >/dev/null
fi
echo >&2
# Download translation
if [ -f "$translation" ] && [ -f "$translation.dat" ]; then
	printf >&2 'Translation already exists (%s)\n' "$translation"
else
	printf >&2 'Downloading translation (%s)\n' "$translation"
	url=$(printf '%s\n' "$translations" |
	awk -F '\t' -v translation="$translation" '
		$1 == translation { print $2; exit }
	')
	# Quran fortune
	curl -f "$url" | tr -d '\r' | awk -F '|' '
	!$0 {exit}
	{if (NR != 1) print "%";
	printf "%s\n\t\t-- Quran %d:%d\n", $3, $1, $2}
	' | fold -s > "$translation"
	strfile "$translation" >/dev/null
fi
echo >&2

# Recitation download
mkdir -p "$XDG_DATA_HOME/quran/audio"
cd "$XDG_DATA_HOME/quran/audio"
if [ -d "$recitation" ]; then
	printf >&2 'Recitation already exists (%s)\n' "$recitation"
else
	printf >&2 'Downloading recitation (%s)\n' "$recitation"
	url=$(printf '%s\n' "$recitations" |
	awk -F '\t' -v recitation="$recitation" '
		$1 == recitation { print $2; exit }
	')
	curl -fLC - -o "$recitation.zip" "$url"
	printf >&2 'Extracting recitation (%s)\n' "$recitation"
	unzip "$recitation" -d "$recitation" >/dev/null
fi
echo >&2

echo >&2 Done!
